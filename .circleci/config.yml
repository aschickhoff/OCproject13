# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.5.0
  docker: circleci/docker@2.1.3
  heroku: circleci/heroku@1.2.6

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.10.2 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.10.2
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - run:
          name: update pip
          command: python3.10 -m pip install --upgrade pip
      - run:
          name: install dependencies
          command: pip install -r requirements.txt
      # - python/install-packages:
      #     pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: Run tests
          # This assumes pytest is installed via the install-package step above
          command: pytest
      - run:
          name: Linting
          command: flake8
  build-and-push-to-dockerhub:
    docker:
      - image: cimg/python:3.10.2
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run: |
          echo "$DOCKERHUB_PASSWORD" | docker login --username $DOCKERHUB_USERNAME --password-stdin
      - run: docker build -t $DOCKERHUB_USERNAME/oc_lettings:$CIRCLE_BRANCH .
      - run: docker push $DOCKERHUB_USERNAME/oc_lettings:$CIRCLE_BRANCH
  deploy-to-heroku:
    docker:
      - image: cimg/python:3.10.2
    steps:
      - checkout
      - run:
          name: Deploy Main to Heroku
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git main


# Invoke jobs via workflow
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build-and-test-workflow:
    jobs:
      - build-and-test
      - build-and-push-to-dockerhub:
          requires:
            - build-and-test
          filters:
            branches:
              only:
                - main
      - deploy-to-heroku:
          requires:
            - build-and-push-to-dockerhub
          filters:
            branches:
              only:
                - main
